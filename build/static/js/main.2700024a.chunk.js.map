{"version":3,"sources":["Search.js","App.js","reportWebVitals.js","index.js"],"names":["Search","useState","city","setCity","message","setMessage","loaded","setLoaded","weather","setWeather","showWeather","response","cityName","data","name","temperature","main","temp","wind","speed","humidity","icon","description","handlePosition","position","console","log","lat","coords","latitude","lon","longitude","apiUrl","axios","get","then","cityArray","now","Date","currentDay","getDay","minutes","getMinutes","hours","getHours","currentTime","header","className","href","onClick","event","preventDefault","forecast","form","onSubmit","url","length","alert","type","placeholder","onChange","target","value","navigator","geolocation","getCurrentPosition","randomCity","Math","floor","random","src","alt","round","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4RAKe,SAASA,IACtB,MAAsBC,mBAAS,IAA/B,mBAAKC,EAAL,KAAWC,EAAX,KACA,EAA4BF,mBAAS,IAArC,mBAAKG,EAAL,KAAcC,EAAd,KACA,EAA0BJ,oBAAS,GAAnC,mBAAKK,EAAL,KAAaC,EAAb,KACA,EAA4BN,mBAAS,IAArC,mBAAKO,EAAL,KAAcC,EAAd,KAEA,SAASC,EAAYC,GACnB,IAAIC,EAAWD,EAASE,KAAKC,KAC7BT,EAAW,GAAD,OAAIO,IACdL,GAAU,GACVE,EAAW,CACTM,YAAaJ,EAASE,KAAKG,KAAKC,KAChCC,KAAMP,EAASE,KAAKK,KAAKC,MACzBC,SAAUT,EAASE,KAAKG,KAAKI,SAC7BC,KAAK,oCAAD,OAAsCV,EAASE,KAAKL,QAAQ,GAAGa,KAA/D,WACJC,YAAaX,EAASE,KAAKL,QAAQ,GAAGc,cAoB1C,SAASC,EAAeC,GACtBC,QAAQC,IAAIF,GACZ,IAAIG,EAAG,UAAMH,EAASI,OAAOC,UACzBC,EAAG,UAAMN,EAASI,OAAOG,WAGzBC,EAAM,8DAA0DL,EAA1D,gBAAqEG,EAArE,kBAFG,mCAEH,kBADE,UAGZG,IAAMC,IAAIF,GAAQG,KAAKzB,GAiDzB,IAAI0B,EAAY,CACd,WACA,eACA,OACA,SACA,QACA,OACA,UACA,eACA,QACA,SACA,OACA,UACA,QACA,SACA,aACA,UACA,QACA,UACA,UACA,QACA,UACA,cACA,SACA,WACA,aACA,UACA,YACA,UACA,WACA,SACA,OACA,YACA,WACA,YACA,WACA,cACA,gBACA,cACA,SACA,WACA,WACA,WACA,QACA,cACA,YACA,WACA,QACA,SACA,QACA,WACA,SACA,SACA,eACA,OACA,WACA,QACA,aACA,WACA,SACA,aACA,SACA,QACA,UACA,cACA,aACA,UACA,QACA,SACA,WACA,YACA,UACA,UACA,UACA,UACA,WACA,SACA,WACA,YACA,YACA,UACA,OACA,SACA,YACA,OACA,SACA,YACA,QACA,OACA,OACA,SACA,WACA,YACA,SACA,aACA,eACA,QACA,UAsBF,IAAIC,EAAM,IAAIC,KAYVC,E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","file":"static/js/main.2700024a.chunk.js","sourcesContent":["import React, { useState } from \"react\";\n\nimport \"./Search.css\";\nimport axios from \"axios\";\n\nexport default function Search() {\n  let [city, setCity] = useState(\"\");\n  let [message, setMessage] = useState(\"\");\n  let [loaded, setLoaded] = useState(false);\n  let [weather, setWeather] = useState({});\n\n  function showWeather(response) {\n    let cityName = response.data.name;\n    setMessage(`${cityName}`);\n    setLoaded(true);\n    setWeather({\n      temperature: response.data.main.temp,\n      wind: response.data.wind.speed,\n      humidity: response.data.main.humidity,\n      icon: `http://openweathermap.org/img/wn/${response.data.weather[0].icon}@2x.png`,\n      description: response.data.weather[0].description,\n    });\n  }\n\n  function handleSubmit(event) {\n    event.preventDefault();\n\n    let apiKey = \"6697611895f9d8bb5ac23403332f6cdd\";\n    let units = \"metric\";\n    let url = `https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${apiKey}&units=${units}`;\n\n    axios.get(url).then(showWeather);\n\n    if (city.length > 0) {\n      setMessage(`${city}`);\n    } else {\n      alert(`Please type the name of a city`);\n    }\n  }\n\n  function handlePosition(position) {\n    console.log(position);\n    let lat = `${position.coords.latitude}`;\n    let lon = `${position.coords.longitude}`;\n    let apiKey = \"6697611895f9d8bb5ac23403332f6cdd\";\n    let units = \"metric\";\n    let apiUrl = `https://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${lon}&appid=${apiKey}&units=${units}`;\n\n    axios.get(apiUrl).then(showWeather);\n  }\n\n  function searchCurrentLocation(event) {\n    event.preventDefault();\n    navigator.geolocation.getCurrentPosition(handlePosition);\n  }\n\n  function updateCity(event) {\n    setCity(event.target.value);\n  }\n\n  function searchMoscow(event) {\n    event.preventDefault();\n    let apiKey = \"6697611895f9d8bb5ac23403332f6cdd\";\n    let units = \"metric\";\n    let apiUrl = `https://api.openweathermap.org/data/2.5/weather?q=moscow&appid=${apiKey}&units=${units}`;\n    setMessage(`Moscow`);\n\n    axios.get(apiUrl).then(showWeather);\n  }\n  function searchBerlin(event) {\n    event.preventDefault();\n    let apiKey = \"6697611895f9d8bb5ac23403332f6cdd\";\n    let units = \"metric\";\n    let apiUrl = `https://api.openweathermap.org/data/2.5/weather?q=berlin&appid=${apiKey}&units=${units}`;\n    setMessage(`Berlin`);\n\n    axios.get(apiUrl).then(showWeather);\n  }\n  function searchLondon(event) {\n    event.preventDefault();\n    let apiKey = \"6697611895f9d8bb5ac23403332f6cdd\";\n    let units = \"metric\";\n    let apiUrl = `https://api.openweathermap.org/data/2.5/weather?q=london&appid=${apiKey}&units=${units}`;\n    setMessage(`London`);\n\n    axios.get(apiUrl).then(showWeather);\n  }\n  function searchNewYork(event) {\n    event.preventDefault();\n    let apiKey = \"6697611895f9d8bb5ac23403332f6cdd\";\n    let units = \"metric\";\n    let apiUrl = `https://api.openweathermap.org/data/2.5/weather?q=new+york&appid=${apiKey}&units=${units}`;\n    setMessage(`New York`);\n\n    axios.get(apiUrl).then(showWeather);\n  }\n\n  let cityArray = [\n    \"Hongkong\",\n    \"Kuala Lumpur\",\n    \"Pune\",\n    \"Berlin\",\n    \"Paris\",\n    \"Rome\",\n    \"Bangkok\",\n    \"Antananarivo\",\n    \"Cairo\",\n    \"Madrid\",\n    \"Lima\",\n    \"Beijing\",\n    \"Tokyo\",\n    \"Sydney\",\n    \"Wellington\",\n    \"Cardiff\",\n    \"Delhi\",\n    \"Caracas\",\n    \"Vilnius\",\n    \"Minsk\",\n    \"Lomé\",\n    \"Ouagadougou\",\n    \"Kaunas\",\n    \"Montreal\",\n    \"Sherbrooke\",\n    \"Calgary\",\n    \"Louisiana\",\n    \"Chicago\",\n    \"Brasilia\",\n    \"Lisbon\",\n    \"Riga\",\n    \"Stockholm\",\n    \"Helsinki\",\n    \"Singapore\",\n    \"New York\",\n    \"Los Angeles\",\n    \"San Francisco\",\n    \"Mexico City\",\n    \"Taipeh\",\n    \"Adelaide\",\n    \"Brighton\",\n    \"Dortmund\",\n    \"Dijon\",\n    \"Montpellier\",\n    \"Barcelona\",\n    \"Canberra\",\n    \"Kabul\",\n    \"Tirana\",\n    \"Dhaka\",\n    \"Brussels\",\n    \"Vienna\",\n    \"Munich\",\n    \"Buenos Aires\",\n    \"Baku\",\n    \"Sarajevo\",\n    \"Sofia\",\n    \"Yaoundé\",\n    \"Kinshasa\",\n    \"Ottawa\",\n    \"Phnom Penh\",\n    \"Havana\",\n    \"Quito\",\n    \"Tallinn\",\n    \"Addis Ababa\",\n    \"Libreville\",\n    \"Tbilisi\",\n    \"Accra\",\n    \"Athens\",\n    \"Budapest\",\n    \"Reykjavik\",\n    \"Jakarta\",\n    \"Nairobi\",\n    \"Bishkek\",\n    \"Tripoli\",\n    \"Valletta\",\n    \"Monaco\",\n    \"Windhoek\",\n    \"Cape Town\",\n    \"Pyongyang\",\n    \"Belfast\",\n    \"Oslo\",\n    \"Muscat\",\n    \"Islamabad\",\n    \"Doha\",\n    \"Riyadh\",\n    \"Mogadishu\",\n    \"Seoul\",\n    \"Nuuk\",\n    \"Bern\",\n    \"Zurich\",\n    \"Damascus\",\n    \"Jerusalem\",\n    \"Ankara\",\n    \"Montevideo\",\n    \"Vatican City\",\n    \"Hanoi\",\n    \"Lusaka\",\n  ];\n\n  function searchRandomLocation(event) {\n    event.preventDefault();\n    let randomCity = cityArray[Math.floor(Math.random() * cityArray.length)];\n    let apiKey = \"6697611895f9d8bb5ac23403332f6cdd\";\n    let units = \"metric\";\n    let apiUrl = `https://api.openweathermap.org/data/2.5/weather?q=${randomCity}&appid=${apiKey}&units=${units}`;\n    setMessage(`${randomCity}`);\n\n    axios.get(apiUrl).then(showWeather);\n  }\n\n  //function formatHour(timestamp) {\n  // let date = new Date(timestamp * 1000);\n  //let hour = date.getHours();\n  //if (hour < 10) {\n  //  hour = `0${hour}`;\n  // }\n  // return hour;\n  // }\n  let now = new Date();\n\n  let days = [\n    \"Sunday\",\n    \"Monday\",\n    \"Tuesday\",\n    \"Wednesday\",\n    \"Thursday\",\n    \"Friday\",\n    \"Saturday\",\n  ];\n  // let day = now.getDay();\n  let currentDay = days[now.getDay()];\n  let minutes = now.getMinutes();\n  if (minutes < 10) {\n    minutes = `0${minutes}`;\n  }\n\n  let hours = now.getHours();\n  if (hours < 10) {\n    hours = `0${hours}`;\n  }\n\n  let currentTime = `${hours}:${minutes}`;\n\n  let header = (\n    <header>\n      <div className=\"citynames\">\n        <div className=\"row\">\n          <div className=\"col cityname\">\n            <p>\n              <a href=\"link\" onClick={searchMoscow}>\n                Moscow\n              </a>\n            </p>\n          </div>\n          <div className=\"col cityname\">\n            <p>\n              <a href=\"link\" onClick={searchBerlin}>\n                Berlin\n              </a>\n            </p>\n          </div>\n          <div className=\"col cityname\">\n            <p>\n              <a href=\"link\" onClick={searchLondon}>\n                London\n              </a>\n            </p>\n          </div>\n          <div className=\"col cityname\">\n            <p>\n              <a href=\"link\" onClick={searchNewYork}>\n                New York\n              </a>\n            </p>\n          </div>\n        </div>\n      </div>\n    </header>\n  );\n  let forecast = <h3>Forecast for next 6 days goes here eventually</h3>;\n  let form = (\n    <form onSubmit={handleSubmit}>\n      <input\n        type=\"search\"\n        placeholder=\"Enter a city...\"\n        onChange={updateCity}\n      />\n      <button type=\"Submit\">Search</button>\n      <button type=\"Submit\" onClick={searchCurrentLocation}>\n        📍 Current location\n      </button>\n      <button type=\"Submit\" onClick={searchRandomLocation}>\n        🗺 Random location\n      </button>\n    </form>\n  );\n\n  if (loaded) {\n    return (\n      <body>\n        <div className=\"container\">\n          {header}\n          {form}\n          <h2 className=\"message\">{message}</h2>\n\n          <div className=\"row\">\n            <h5 className=\"lastUpdate\">Last update:</h5>\n          </div>\n          <div className=\"row\">\n            <div className=\"col\">\n              <h4>\n                {currentDay} {currentTime}\n              </h4>\n              <h4 className=\"description\">{weather.description}</h4>\n              <h2>\n                <img src={weather.icon} alt={weather.description} />\n                <span className=\"currentDegrees\">\n                  {Math.round(weather.temperature)}°C\n                </span>\n              </h2>\n            </div>\n            <div className=\"col\">\n              <h4>Humidity: {weather.humidity}%</h4>\n              <h4>Wind: {weather.wind}m/sec</h4>\n            </div>\n          </div>\n          <div className=\"forecast\">\n            <h3>Weather forecast</h3>\n            <div className=\"hours\">Weather for next 6 hours goes here</div>\n            <div className=\"week\">{forecast}</div>\n          </div>\n          <footer>\n            <p>\n              <a href=\"https://github.com/AnniK93/weather-app-react-new\">\n                Open source code\n              </a>\n              by Anni\n            </p>\n          </footer>\n        </div>\n      </body>\n    );\n  } else {\n    return (\n      <body>\n        <div className=\"container\">\n          {header}\n          {form}\n        </div>\n      </body>\n    );\n  }\n}\n","import \"./App.css\";\nimport Search from \"./Search\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Search />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport \"bootstrap/dist/css/bootstrap.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}